import spacy
from spacy.pipeline import EntityRuler

# Load the spaCy English model.
nlp = spacy.load("en_core_web_sm")

# Create an EntityRuler and insert it into the pipeline before the default NER.
ruler = nlp.add_pipe("entity_ruler", before="ner")

# Define rule patterns for our custom entities.
# Patterns are defined as lists of token specifications.
patterns = [
    {
        "label": "DIRECTION",
        "pattern": [{"LOWER": "buy"}]  # also consider adding {"LOWER": "sell"} if needed
    },
    {
        "label": "SIZE",
        "pattern": [{"TEXT": {"REGEX": "^[0-9]+m$"}}]  # matches tokens like 100m, 250m, etc.
    },
    {
        "label": "BOND",
        "pattern": [{"LOWER": "hsbc"}]  # matches hsbc (output will later be upper-cased)
    },
    {
        "label": "CLIENT",
        "pattern": [{"LOWER": "barclays"}]  # matches barclays (output later capitalized)
    }
]

# Add the custom patterns to the ruler.
ruler.add_patterns(patterns)

# Define the input text.
text = "buy 100m of hsbc for barclays"

# Process the text.
doc = nlp(text)

# Initialize a result dictionary.
result = {}

# Iterate through the recognized entities and map each to our desired output.
for ent in doc.ents:
    if ent.label_ == "DIRECTION":
        # Capitalize the first letter.
        result["Direction"] = ent.text.capitalize()
    elif ent.label_ == "SIZE":
        result["Size"] = ent.text
    elif ent.label_ == "BOND":
        # For this example, we want the bond (HSBC) fully upper-case.
        result["Bond"] = ent.text.upper()
    elif ent.label_ == "CLIENT":
        # Capitalize the client name.
        result["Client"] = ent.text.capitalize()

# Print the resulting dictionary.
print(result)
